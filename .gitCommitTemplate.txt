# git config --global commit.template ./.giCommitTemplate.txt
# <타입(Type)>: <제목(Subject)> (MUST)
##### 제목은 최대 50 글자까지만 입력 (Subject.size() <= 50) ############## -> |
# ex) feat: 회원가입 API 구현
# 본문(Body) (OPTIONAL)

######## 본문은 한 줄에 최대 72 글자까지만 입력(each line of body length <= 72) ########################### -> |
# ex)
# - first line ABCDE
# - second line FGHIJ

# 꼬릿말(Footer) (RECOMMENDED) ex) #이슈 번호(Issue Number)
# --- COMMIT END ---

# <타입(Type)> 리스트(List)
#   feat    : 기능 (새로운 기능, New Feature)
#   fix     : 버그 (버그 수정, Bug Fix)
#   refactor: 리팩토링(refactoring)
#   style   : 스타일 (코드 형식, 세미콜론 추가: 비즈니스 로직에 변경 없음)
#   docs    : 문서 (문서 추가, 수정, 삭제, documentation)
#   test    : 테스트 (테스트 코드 추가, 수정, 삭제: 비즈니스 로직에 변경 없음, for test code)
#   chore   : 기타 변경사 (빌드 스크립트 수정 등)
# ------------------
#     제목 첫 글자를 대문자로
#     제목은 명령문으로
#     제목 끝에 마침표(.) 금지
#     제목과 본문을 한 줄 띄워 분리하기
#     본문은 "어떻게" 보다 "무엇을", "왜"를 설명한다.
#     본문에 여러줄의 메시지를 작성할 땐 "-"로 구분
#     동명사보다는 명사를 사용
#     관사는 사용 지양
#     부정문 `Don't` 사용 지향
# ------------------

# 좋은 커밋 메시지를 위한 영어 단어 목록
# 출처 : https://blog.ull.im/engineering/2019/03/10/logs-on-git.html
# FIX : 올바르지 않은 동작을 고친 경우 사용
# ADD : 코드나 테스트, 예제, 문서 등의 추가가 있을 때 사용
# REMOVE : 코드의 삭제가 있을 경우 사용
# USE : 특별히 무언가를 사용해 구현을 하는 경우 사용
# REFACTOR : 전면 수정이 있을 경우 사용
# UPDATE : 개정이나 버전 업데이트가 있을 경우 사용, 수정, 추가, 보완
# MAKE : 기존 동작의 변경
# IMPLEMENT : 온전한 구현체를 완성시켰을 때 사용
# CORRECT : 문법의 오류나 타입 변경, 이름 변경 등 사용
# MOVE, RENAME
